name: Test Demo Scripts

on:
  push:
    branches: [ main, master ]
    paths:
      - 'demo*.sh'
      - 'demo*.py'
      - 'demo_functions.sh'
      - 'requirements.txt'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'demo*.sh'
      - 'demo*.py' 
      - 'demo_functions.sh'
      - 'requirements.txt'
  workflow_dispatch:

jobs:
  test-demo-scripts:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        demo:
          - { name: "basic", script: "./demo.sh", args: "--headless", timeout: "30s" }
          - { name: "full", script: "./demo_full.sh", args: "--headless", timeout: "60s" }
          - { name: "basic-interactive", script: "./demo.sh", args: "", timeout: "15s" }
          - { name: "full-interactive", script: "./demo_full.sh", args: "", timeout: "15s" }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tmux

      - name: Create virtual environment and install dependencies
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Make scripts executable
        run: |
          chmod +x demo.sh demo_full.sh demo_cast.sh
          chmod +x demo_narrator.py demo_monitor.py demo_split.sh

      - name: Test demo script - ${{ matrix.demo.name }}
        run: |
          source venv/bin/activate
          export LLD_MODE=mock
          export TERM=xterm-256color
          
          echo "Testing: ${{ matrix.demo.script }} ${{ matrix.demo.args }}"
          
          if [[ "${{ matrix.demo.args }}" == "--headless" ]]; then
            # Headless mode - let it run completely
            timeout ${{ matrix.demo.timeout }} ${{ matrix.demo.script }} ${{ matrix.demo.args }} || {
              exit_code=$?
              if [ $exit_code -eq 124 ]; then
                echo "Demo timed out but that's expected for headless testing"
                exit 0
              else
                echo "Demo failed with exit code $exit_code"
                exit $exit_code
              fi
            }
          else
            # Interactive mode - send quit command quickly
            (
              sleep 2
              echo "q"
            ) | timeout ${{ matrix.demo.timeout }} ${{ matrix.demo.script }} ${{ matrix.demo.args }} || {
              exit_code=$?
              if [ $exit_code -eq 124 ] || [ $exit_code -eq 130 ]; then
                echo "Demo exited as expected in interactive mode"
                exit 0
              else
                echo "Demo failed with exit code $exit_code"
                exit $exit_code
              fi
            }
          fi

      - name: Test help functionality
        run: |
          source venv/bin/activate
          export LLD_MODE=mock
          
          # Test help flags
          ${{ matrix.demo.script }} --help || echo "Help output displayed"

  test-split-screen-demos:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        scenario: [basic, surge, chaos, multi]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tmux

      - name: Create virtual environment and install dependencies
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Make scripts executable
        run: |
          chmod +x demo_split.sh demo_narrator.py demo_monitor.py

      - name: Test split-screen demo components individually
        run: |
          source venv/bin/activate
          export LLD_MODE=mock
          export TERM=xterm-256color
          
          echo "Testing narrator component for scenario: ${{ matrix.scenario }}"
          timeout 10s python3 demo_narrator.py --scenario ${{ matrix.scenario }} --headless || {
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "Narrator component test completed (timed out as expected)"
            else
              echo "Narrator component failed with exit code $exit_code"
              exit $exit_code
            fi
          }
          
          echo "Testing monitor component for scenario: ${{ matrix.scenario }}"
          timeout 5s python3 demo_monitor.py --scenario ${{ matrix.scenario }} --headless || {
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "Monitor component test completed (timed out as expected)"
            else
              echo "Monitor component failed with exit code $exit_code"  
              exit $exit_code
            fi
          }

      - name: Test split-screen demo (tmux fallback)
        run: |
          source venv/bin/activate
          export LLD_MODE=mock
          export TERM=xterm-256color
          
          echo "Testing split-screen demo for scenario: ${{ matrix.scenario }}"
          
          # Test the script's tmux availability check and fallback
          timeout 15s ./demo_split.sh --scenario ${{ matrix.scenario }} --headless || {
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "Split-screen demo test completed (timed out as expected)"
            else
              echo "Split-screen demo failed with exit code $exit_code"
              exit $exit_code
            fi
          }

  test-asciinema-recording:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y asciinema tmux

      - name: Create virtual environment and install dependencies
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Make scripts executable
        run: |
          chmod +x demo.sh demo_cast.sh

      - name: Test asciinema recording capability
        run: |
          source venv/bin/activate
          export LLD_MODE=mock
          export TERM=xterm-256color
          
          echo "Testing asciinema recording of basic demo..."
          
          # Test that demo_cast.sh can at least start
          timeout 10s ./demo_cast.sh --headless || {
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "Asciinema recording test completed (timed out as expected)"
            else
              echo "Asciinema recording failed with exit code $exit_code"
              exit $exit_code
            fi
          }

      - name: Validate demo cast script options
        run: |
          source venv/bin/activate
          
          # Test help output
          ./demo_cast.sh --help || echo "Help displayed"
          
          # Test that script handles options correctly
          echo "Demo cast script validation completed"

  validate-demo-consistency:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate demo script consistency
        run: |
          echo "Checking demo script consistency..."
          
          # Check that all demo scripts exist
          required_files=(
            "demo.sh"
            "demo_full.sh" 
            "demo_cast.sh"
            "demo_split.sh"
            "demo_narrator.py"
            "demo_monitor.py"
            "demo_functions.sh"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Required demo file missing: $file"
              exit 1
            fi
            echo "✓ Found: $file"
          done

      - name: Check demo script permissions
        run: |
          echo "Checking script permissions..."
          
          # Check that scripts are executable
          executable_files=(
            "demo.sh"
            "demo_full.sh"
            "demo_cast.sh" 
            "demo_split.sh"
            "demo_narrator.py"
            "demo_monitor.py"
          )
          
          for file in "${executable_files[@]}"; do
            if [ ! -x "$file" ]; then
              echo "Warning: $file is not executable, fixing..."
              chmod +x "$file"
            fi
            echo "✓ Executable: $file"
          done

      - name: Validate demo script syntax
        run: |
          echo "Validating script syntax..."
          
          # Check bash scripts
          bash_scripts=("demo.sh" "demo_full.sh" "demo_cast.sh" "demo_split.sh" "demo_functions.sh")
          for script in "${bash_scripts[@]}"; do
            bash -n "$script" && echo "✓ Syntax OK: $script" || {
              echo "✗ Syntax Error: $script"
              exit 1
            }
          done
          
          # Check Python scripts
          python3 -m py_compile demo_narrator.py && echo "✓ Syntax OK: demo_narrator.py" || {
            echo "✗ Syntax Error: demo_narrator.py"
            exit 1
          }
          
          python3 -m py_compile demo_monitor.py && echo "✓ Syntax OK: demo_monitor.py" || {
            echo "✗ Syntax Error: demo_monitor.py"
            exit 1
          }

      - name: Check demo documentation
        run: |
          echo "Checking demo documentation..."
          
          # Ensure README mentions demos
          if grep -q "demo" README.md; then
            echo "✓ README.md mentions demos"
          else
            echo "⚠ WARNING: README.md should mention demo capabilities"
          fi